tic_tac_toe = [0 for i in range(9)]
lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
line_values = [0 for i in range(8)]
user_char = {1: "O", -1: "X", 0: "_"} # 3 —Å–æ—Å—Ç–æ—è–Ω–∏—è —è—á–µ–π–∫–∏ - –Ω–µ—Ç —Ö–æ–¥–∞, —Å—Ö–æ–¥–∏–ª —é–∑–µ—Ä, —Å—Ö–æ–¥–∏–ª –∫–æ–º–ø. 
turn = -1 # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —é–∑–µ—Ä —Ö–æ–¥–∏—Ç –∫—Ä–µ—Å—Ç–æ–º –∏ = -1


def game():
        global user_char, turn
        if input("–•–æ—á–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ–±—ã –ò–ò —Ö–æ–¥–∏–ª –ø–µ—Ä–≤—ã–º ? (Y - –¥–∞ / Any Key - –Ω–µ—Ç) ").lower() == "y":
            user_char = {1:"X", -1:"O", 0:"_"}
            turn = 1
        display()
        while not has_winner():
            if 0 in tic_tac_toe:
                next_move(turn)
                turn *= -1
                display()
            else:
                print("–ù–∏—á—å—è !!!üòë")
                break

def has_winner():
    if max(line_values) == 3:
        print("–Ø –≤—ã–∏–≥—Ä–∞–ª!!!üòé")
        return True
    elif min(line_values) == -3:
        print("–¢—ã –≤—ã–∏–≥—Ä–∞–ª!!!üò¢")
        return True

def next_move(turn):
        if turn == -1: # –•–æ–¥ —é–∑–µ—Ä–∞
            print("–¢–≤–æ–π —Ö–æ–¥ (" + user_char[-1] + "): ")
            while not is_user_move_successful(input("–î–µ–ª–∞–π —Å–≤–æ–π —Ö–æ–¥: ")):
                print("–ù–µ —Ç—É–¥–∞ —Ö–æ–¥–∏—à—å, —Å—Ö–æ–¥–∏ –µ—â—ë —Ä–∞–∑... ")
        else: # –•–æ–¥ –∫–æ–º–ø–∞
            print("–ú–æ–π —Ö–æ–¥: ")
            for line_value in [2, -2, -1, 1, 0]:
                cell = find_most_valuable_cell(line_value)
                if cell >= 0: # –Ω–∞—à—ë–ª –∫–ª–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                    mark_cell(cell, turn)
                    print ("–í—ã–±–∏—Ä–∞—é –∫–ª–µ—Ç–∫—É", str(cell))
                    return

def is_user_move_successful(user_input):
        s = list(user_input)[0]
        if '012345678'.find(s) >= 0 and tic_tac_toe[int(s)] == 0:
            mark_cell(int(s), turn)
            return True

def find_most_valuable_cell(line_value):
        if set(tic_tac_toe) == {0}:
            return 1
        all_lines = [i for i in range(8) if line_values[i] == line_value]
        all_cells = [j for line in all_lines for j in lines[line] if tic_tac_toe[j] == 0]
        cell_frequency = dict((c, all_cells.count(c)) for c in set(all_cells))
        if len(cell_frequency) > 0:
            return max(cell_frequency, key=cell_frequency.get)
        else:
            return -1

def mark_cell(cell, turn):
        global line_values, tic_tac_toe
        tic_tac_toe[cell] = turn
        line_values = [sum(cell_value) for line in lines for cell_value in [[tic_tac_toe[j] for j in line]]]

def display():
        print(' _ _ _\n' + ''.join('|' + user_char[tic_tac_toe[i]] + ('|\n' if i % 3 == 2 else '') for i in range(9)))
        
def rules():
        print(""" 
        –ò–≥—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏.
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫:
                         _ _ _
                        |0|1|2|
                        |3|4|5|
                        |6|7|8|
        –ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ–¥–Ω–æ —á–∏—Å–ª–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–æ–º–µ—Ä—É –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç—É–ø–æ–π, –ò–ò –≥–æ–≤–æ—Ä–∏—Ç –µ–º—É, —á—Ç–æ–±—ã –æ–Ω —Å—Ö–æ–¥–∏–ª –µ—â—ë —Ä–∞–∑ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±–µ—Ä—ë—Ç 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –∏–∑ 8 –ª–∏–Ω–∏–π,
        –ª–∏–±–æ –Ω–∏—á—å–µ–π, –∫–æ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–æ –ø—Ä–∞–≤–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞.
        """)

rules()
game()